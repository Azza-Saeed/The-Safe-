
The_SAFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00000c3a  00000cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000cc  008000cc  00000d3a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001490  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fea  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051d  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000906  00000000  00000000  00002ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000358  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2f  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3c       	cpi	r26, 0xCC	; 204
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac ec       	ldi	r26, 0xCC	; 204
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 16 06 	call	0xc2c	; 0xc2c <main>
  8a:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
char tries= Maximum_Tries;
char correct=0;


void APP_Init(){
	LCD_vInit();
  92:	0e 94 a7 02 	call	0x54e	; 0x54e <LCD_vInit>
	keypad_vInit();
  96:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <keypad_vInit>
}
  9a:	08 95       	ret

0000009c <Set_Password>:
	Set_Password();
	Check_Password();
}
	
void Set_Password(void){
		if( EEPROM_read(Status_Location) == NOTPRESSED ){
  9c:	84 e2       	ldi	r24, 0x24	; 36
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 11 06 	call	0xc22	; 0xc22 <EEPROM_read>
  a4:	8f 3f       	cpi	r24, 0xFF	; 255
  a6:	09 f0       	breq	.+2      	; 0xaa <Set_Password+0xe>
  a8:	42 c0       	rjmp	.+132    	; 0x12e <Set_Password+0x92>
			LCD_clearscreen();
  aa:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
			LCD_movecursor(1,0);
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
			LCD_vSend_string("Set Pass:");
  b6:	80 e6       	ldi	r24, 0x60	; 96
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
			for (i=0;i<Maximum_Pass;i++){
  be:	10 92 d1 00 	sts	0x00D1, r1
				do
				{
					Pass=keypad_u8check_press();
  c2:	0e 94 27 02 	call	0x44e	; 0x44e <keypad_u8check_press>
  c6:	80 93 bb 00 	sts	0x00BB, r24
					
				} while ( Pass == NOTPRESSED );
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	d1 f3       	breq	.-12     	; 0xc2 <Set_Password+0x26>
				LCD_movecursor(1,10+i);
  ce:	60 91 d1 00 	lds	r22, 0x00D1
  d2:	66 5f       	subi	r22, 0xF6	; 246
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
				LCD_vSend_char(Pass);
  da:	80 91 bb 00 	lds	r24, 0x00BB
  de:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	94 e3       	ldi	r25, 0x34	; 52
  e6:	ac e0       	ldi	r26, 0x0C	; 12
  e8:	81 50       	subi	r24, 0x01	; 1
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	a0 40       	sbci	r26, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Set_Password+0x4c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Set_Password+0x56>
  f2:	00 00       	nop
				_delay_ms(500);
				LCD_movecursor(1,10+i);
  f4:	60 91 d1 00 	lds	r22, 0x00D1
  f8:	66 5f       	subi	r22, 0xF6	; 246
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
				LCD_vSend_char('*');
 100:	8a e2       	ldi	r24, 0x2A	; 42
 102:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
				EEPROM_write(First_Location+i,Pass);
 106:	80 91 d1 00 	lds	r24, 0x00D1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	80 96       	adiw	r24, 0x20	; 32
 10e:	60 91 bb 00 	lds	r22, 0x00BB
 112:	0e 94 09 06 	call	0xc12	; 0xc12 <EEPROM_write>
void Set_Password(void){
		if( EEPROM_read(Status_Location) == NOTPRESSED ){
			LCD_clearscreen();
			LCD_movecursor(1,0);
			LCD_vSend_string("Set Pass:");
			for (i=0;i<Maximum_Pass;i++){
 116:	80 91 d1 00 	lds	r24, 0x00D1
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 d1 00 	sts	0x00D1, r24
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	78 f2       	brcs	.-98     	; 0xc2 <Set_Password+0x26>
				_delay_ms(500);
				LCD_movecursor(1,10+i);
				LCD_vSend_char('*');
				EEPROM_write(First_Location+i,Pass);
			}
			EEPROM_write(Status_Location,Check_Data);
 124:	84 e2       	ldi	r24, 0x24	; 36
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	64 e4       	ldi	r22, 0x44	; 68
 12a:	0e 94 09 06 	call	0xc12	; 0xc12 <EEPROM_write>
 12e:	08 95       	ret

00000130 <Check_Password>:
			
		}
}		
void Check_Password(void){
 130:	2f 92       	push	r2
 132:	3f 92       	push	r3
 134:	4f 92       	push	r4
 136:	5f 92       	push	r5
 138:	6f 92       	push	r6
 13a:	7f 92       	push	r7
 13c:	8f 92       	push	r8
 13e:	9f 92       	push	r9
 140:	af 92       	push	r10
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
		while( correct==0 )
		{
			Tem_Location[0]=Tem_Location[1]=Tem_Location[2]=Tem_Location[3]=NOTPRESSED;
 154:	00 ed       	ldi	r16, 0xD0	; 208
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	78 01       	movw	r14, r16
 15a:	08 94       	sec
 15c:	e1 08       	sbc	r14, r1
 15e:	f1 08       	sbc	r15, r1
 160:	0f 2e       	mov	r0, r31
 162:	fe ef       	ldi	r31, 0xFE	; 254
 164:	cf 2e       	mov	r12, r31
 166:	ff ef       	ldi	r31, 0xFF	; 255
 168:	df 2e       	mov	r13, r31
 16a:	f0 2d       	mov	r31, r0
 16c:	c0 0e       	add	r12, r16
 16e:	d1 1e       	adc	r13, r17
 170:	0f 2e       	mov	r0, r31
 172:	fd ef       	ldi	r31, 0xFD	; 253
 174:	af 2e       	mov	r10, r31
 176:	ff ef       	ldi	r31, 0xFF	; 255
 178:	bf 2e       	mov	r11, r31
 17a:	f0 2d       	mov	r31, r0
 17c:	a0 0e       	add	r10, r16
 17e:	b1 1e       	adc	r11, r17
			LCD_clearscreen();
			LCD_movecursor(1,0);
			LCD_vSend_string("Enter Pass:");
 180:	0f 2e       	mov	r0, r31
 182:	fa e6       	ldi	r31, 0x6A	; 106
 184:	8f 2e       	mov	r8, r31
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	9f 2e       	mov	r9, r31
 18a:	f0 2d       	mov	r31, r0
				LCD_vSend_char(Tem_Location[i]);
				_delay_ms(500);
				LCD_movecursor(1,12+i);
				LCD_vSend_char('*');
			}
			if( EEPROM_read(First_Location) == Tem_Location[0] && EEPROM_read(Second_Location) == Tem_Location[1] && EEPROM_read(Third_Location) == Tem_Location[2] && EEPROM_read(Furth_Location) == Tem_Location[3] ){
 18c:	0f 2e       	mov	r0, r31
 18e:	fd ec       	ldi	r31, 0xCD	; 205
 190:	6f 2e       	mov	r6, r31
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	7f 2e       	mov	r7, r31
 196:	f0 2d       	mov	r31, r0
					_delay_ms(500);
					
				}else{
					LCD_clearscreen();
					LCD_movecursor(1,0);
					LCD_vSend_string("Wrong Pass");
 198:	0f 2e       	mov	r0, r31
 19a:	f3 e9       	ldi	r31, 0x93	; 147
 19c:	4f 2e       	mov	r4, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	5f 2e       	mov	r5, r31
 1a2:	f0 2d       	mov	r31, r0
					_delay_ms(500);
					LCD_clearscreen();
					LCD_movecursor(1,0);
					LCD_vSend_string("The Safe Closed");
 1a4:	0f 2e       	mov	r0, r31
 1a6:	fa ea       	ldi	r31, 0xAA	; 170
 1a8:	2f 2e       	mov	r2, r31
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	3f 2e       	mov	r3, r31
 1ae:	f0 2d       	mov	r31, r0
			EEPROM_write(Status_Location,Check_Data);
			
		}
}		
void Check_Password(void){
		while( correct==0 )
 1b0:	f4 c0       	rjmp	.+488    	; 0x39a <Check_Password+0x26a>
		{
			Tem_Location[0]=Tem_Location[1]=Tem_Location[2]=Tem_Location[3]=NOTPRESSED;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	d8 01       	movw	r26, r16
 1b6:	8c 93       	st	X, r24
 1b8:	f7 01       	movw	r30, r14
 1ba:	80 83       	st	Z, r24
 1bc:	d6 01       	movw	r26, r12
 1be:	8c 93       	st	X, r24
 1c0:	f5 01       	movw	r30, r10
 1c2:	80 83       	st	Z, r24
			LCD_clearscreen();
 1c4:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
			LCD_movecursor(1,0);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
			LCD_vSend_string("Enter Pass:");
 1d0:	c4 01       	movw	r24, r8
 1d2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
			for (i=0;i<Maximum_Pass;i++)
 1d6:	10 92 d1 00 	sts	0x00D1, r1
			{
				do
				{
					Tem_Location[i]=keypad_u8check_press();
 1da:	c0 91 d1 00 	lds	r28, 0x00D1
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	0e 94 27 02 	call	0x44e	; 0x44e <keypad_u8check_press>
 1e4:	fe 01       	movw	r30, r28
 1e6:	e3 53       	subi	r30, 0x33	; 51
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 83       	st	Z, r24
					
				} while ( Tem_Location[i] == NOTPRESSED );
 1ec:	80 91 d1 00 	lds	r24, 0x00D1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	83 53       	subi	r24, 0x33	; 51
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	dc 01       	movw	r26, r24
 1f8:	8c 91       	ld	r24, X
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	71 f3       	breq	.-36     	; 0x1da <Check_Password+0xaa>
				//LCD_movecursor(1,12+i);
				LCD_vSend_char(Tem_Location[i]);
 1fe:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	94 e3       	ldi	r25, 0x34	; 52
 206:	ac e0       	ldi	r26, 0x0C	; 12
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	a0 40       	sbci	r26, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <Check_Password+0xd8>
 210:	00 c0       	rjmp	.+0      	; 0x212 <Check_Password+0xe2>
 212:	00 00       	nop
				_delay_ms(500);
				LCD_movecursor(1,12+i);
 214:	60 91 d1 00 	lds	r22, 0x00D1
 218:	64 5f       	subi	r22, 0xF4	; 244
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
				LCD_vSend_char('*');
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
		{
			Tem_Location[0]=Tem_Location[1]=Tem_Location[2]=Tem_Location[3]=NOTPRESSED;
			LCD_clearscreen();
			LCD_movecursor(1,0);
			LCD_vSend_string("Enter Pass:");
			for (i=0;i<Maximum_Pass;i++)
 226:	80 91 d1 00 	lds	r24, 0x00D1
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 d1 00 	sts	0x00D1, r24
 230:	84 30       	cpi	r24, 0x04	; 4
 232:	98 f2       	brcs	.-90     	; 0x1da <Check_Password+0xaa>
				LCD_vSend_char(Tem_Location[i]);
				_delay_ms(500);
				LCD_movecursor(1,12+i);
				LCD_vSend_char('*');
			}
			if( EEPROM_read(First_Location) == Tem_Location[0] && EEPROM_read(Second_Location) == Tem_Location[1] && EEPROM_read(Third_Location) == Tem_Location[2] && EEPROM_read(Furth_Location) == Tem_Location[3] ){
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 11 06 	call	0xc22	; 0xc22 <EEPROM_read>
 23c:	d3 01       	movw	r26, r6
 23e:	9c 91       	ld	r25, X
 240:	89 17       	cp	r24, r25
 242:	09 f0       	breq	.+2      	; 0x246 <Check_Password+0x116>
 244:	44 c0       	rjmp	.+136    	; 0x2ce <Check_Password+0x19e>
 246:	81 e2       	ldi	r24, 0x21	; 33
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 11 06 	call	0xc22	; 0xc22 <EEPROM_read>
 24e:	ee ec       	ldi	r30, 0xCE	; 206
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	89 17       	cp	r24, r25
 256:	d9 f5       	brne	.+118    	; 0x2ce <Check_Password+0x19e>
 258:	82 e2       	ldi	r24, 0x22	; 34
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 11 06 	call	0xc22	; 0xc22 <EEPROM_read>
 260:	af ec       	ldi	r26, 0xCF	; 207
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	9c 91       	ld	r25, X
 266:	89 17       	cp	r24, r25
 268:	91 f5       	brne	.+100    	; 0x2ce <Check_Password+0x19e>
 26a:	83 e2       	ldi	r24, 0x23	; 35
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 11 06 	call	0xc22	; 0xc22 <EEPROM_read>
 272:	f8 01       	movw	r30, r16
 274:	90 81       	ld	r25, Z
 276:	89 17       	cp	r24, r25
 278:	51 f5       	brne	.+84     	; 0x2ce <Check_Password+0x19e>
				LCD_clearscreen();
 27a:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
				LCD_movecursor(1,0);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
				LCD_vSend_string("Correct Pass");
 286:	86 e7       	ldi	r24, 0x76	; 118
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	99 e6       	ldi	r25, 0x69	; 105
 292:	a8 e1       	ldi	r26, 0x18	; 24
 294:	81 50       	subi	r24, 0x01	; 1
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	a0 40       	sbci	r26, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <Check_Password+0x164>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <Check_Password+0x16e>
 29e:	00 00       	nop
				_delay_ms(1000);
				LCD_clearscreen();
 2a0:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
				LCD_movecursor(1,0);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
				LCD_vSend_string("The Safe Opened");
 2ac:	83 e8       	ldi	r24, 0x83	; 131
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	99 e6       	ldi	r25, 0x69	; 105
 2b8:	a8 e1       	ldi	r26, 0x18	; 24
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	a0 40       	sbci	r26, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <Check_Password+0x18a>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Check_Password+0x194>
 2c4:	00 00       	nop
				_delay_ms(1000);
				correct=1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 cc 00 	sts	0x00CC, r24
 2cc:	66 c0       	rjmp	.+204    	; 0x39a <Check_Password+0x26a>
			}else{
				tries--;
 2ce:	80 91 ba 00 	lds	r24, 0x00BA
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	80 93 ba 00 	sts	0x00BA, r24
				if(tries>0){
 2d8:	88 23       	and	r24, r24
 2da:	c1 f1       	breq	.+112    	; 0x34c <Check_Password+0x21c>
					LCD_clearscreen();
 2dc:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
					LCD_movecursor(1,0);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
					LCD_vSend_string("Wrong Pass");
 2e8:	c2 01       	movw	r24, r4
 2ea:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	94 e3       	ldi	r25, 0x34	; 52
 2f2:	ac e0       	ldi	r26, 0x0C	; 12
 2f4:	81 50       	subi	r24, 0x01	; 1
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	a0 40       	sbci	r26, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <Check_Password+0x1c4>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <Check_Password+0x1ce>
 2fe:	00 00       	nop
					_delay_ms(500);
					LCD_clearscreen();
 300:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
					LCD_movecursor(1,0);
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
					LCD_vSend_string("Tries left:");
 30c:	8e e9       	ldi	r24, 0x9E	; 158
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	94 e3       	ldi	r25, 0x34	; 52
 318:	ac e0       	ldi	r26, 0x0C	; 12
 31a:	81 50       	subi	r24, 0x01	; 1
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	a0 40       	sbci	r26, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <Check_Password+0x1ea>
 322:	00 c0       	rjmp	.+0      	; 0x324 <Check_Password+0x1f4>
 324:	00 00       	nop
					_delay_ms(500);
					LCD_movecursor(1,12);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	6c e0       	ldi	r22, 0x0C	; 12
 32a:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
					LCD_vSend_char(tries+48);// asci code
 32e:	80 91 ba 00 	lds	r24, 0x00BA
 332:	80 5d       	subi	r24, 0xD0	; 208
 334:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	94 e3       	ldi	r25, 0x34	; 52
 33c:	ac e0       	ldi	r26, 0x0C	; 12
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	a0 40       	sbci	r26, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <Check_Password+0x20e>
 346:	00 c0       	rjmp	.+0      	; 0x348 <Check_Password+0x218>
 348:	00 00       	nop
 34a:	27 c0       	rjmp	.+78     	; 0x39a <Check_Password+0x26a>
					_delay_ms(500);
					
				}else{
					LCD_clearscreen();
 34c:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
					LCD_movecursor(1,0);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
					LCD_vSend_string("Wrong Pass");
 358:	c2 01       	movw	r24, r4
 35a:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	94 e3       	ldi	r25, 0x34	; 52
 362:	ac e0       	ldi	r26, 0x0C	; 12
 364:	81 50       	subi	r24, 0x01	; 1
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	a0 40       	sbci	r26, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <Check_Password+0x234>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <Check_Password+0x23e>
 36e:	00 00       	nop
					_delay_ms(500);
					LCD_clearscreen();
 370:	0e 94 32 03 	call	0x664	; 0x664 <LCD_clearscreen>
					LCD_movecursor(1,0);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	0e 94 3c 03 	call	0x678	; 0x678 <LCD_movecursor>
					LCD_vSend_string("The Safe Closed");
 37c:	c1 01       	movw	r24, r2
 37e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_vSend_string>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	94 e3       	ldi	r25, 0x34	; 52
 386:	ac e0       	ldi	r26, 0x0C	; 12
 388:	81 50       	subi	r24, 0x01	; 1
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	a0 40       	sbci	r26, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <Check_Password+0x258>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Check_Password+0x262>
 392:	00 00       	nop
					_delay_ms(500);
					correct=1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 cc 00 	sts	0x00CC, r24
			EEPROM_write(Status_Location,Check_Data);
			
		}
}		
void Check_Password(void){
		while( correct==0 )
 39a:	80 91 cc 00 	lds	r24, 0x00CC
 39e:	88 23       	and	r24, r24
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <Check_Password+0x274>
 3a2:	07 cf       	rjmp	.-498    	; 0x1b2 <Check_Password+0x82>
					_delay_ms(500);
					correct=1;
				}
			}
		}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	7f 90       	pop	r7
 3be:	6f 90       	pop	r6
 3c0:	5f 90       	pop	r5
 3c2:	4f 90       	pop	r4
 3c4:	3f 90       	pop	r3
 3c6:	2f 90       	pop	r2
 3c8:	08 95       	ret

000003ca <APP_Main>:
	keypad_vInit();
}

void APP_Main(){
	
	Set_Password();
 3ca:	0e 94 4e 00 	call	0x9c	; 0x9c <Set_Password>
	Check_Password();
 3ce:	0e 94 98 00 	call	0x130	; 0x130 <Check_Password>
}
 3d2:	08 95       	ret

000003d4 <keypad_vInit>:

 #include "keypad_driver.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir('D',0,1);
 3d4:	84 e4       	ldi	r24, 0x44	; 68
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
 3de:	84 e4       	ldi	r24, 0x44	; 68
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
 3e8:	84 e4       	ldi	r24, 0x44	; 68
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	63 e0       	ldi	r22, 0x03	; 3
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
 3fc:	84 e4       	ldi	r24, 0x44	; 68
 3fe:	64 e0       	ldi	r22, 0x04	; 4
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
 406:	84 e4       	ldi	r24, 0x44	; 68
 408:	65 e0       	ldi	r22, 0x05	; 5
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
 410:	84 e4       	ldi	r24, 0x44	; 68
 412:	66 e0       	ldi	r22, 0x06	; 6
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	67 e0       	ldi	r22, 0x07	; 7
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	0e 94 39 05 	call	0xa72	; 0xa72 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	0e 94 39 05 	call	0xa72	; 0xa72 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
 438:	84 e4       	ldi	r24, 0x44	; 68
 43a:	66 e0       	ldi	r22, 0x06	; 6
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	0e 94 39 05 	call	0xa72	; 0xa72 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	67 e0       	ldi	r22, 0x07	; 7
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	0e 94 39 05 	call	0xa72	; 0xa72 <DIO_vconnectpullup>
	  
 }
 44c:	08 95       	ret

0000044e <keypad_u8check_press>:
 char keypad_u8check_press()
 {
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	60 97       	sbiw	r28, 0x10	; 16
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 466:	de 01       	movw	r26, r28
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	ec eb       	ldi	r30, 0xBC	; 188
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 e1       	ldi	r24, 0x10	; 16
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	81 50       	subi	r24, 0x01	; 1
 476:	e1 f7       	brne	.-8      	; 0x470 <keypad_u8check_press+0x22>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 478:	00 e0       	ldi	r16, 0x00	; 0
	 {
		DIO_write('D',0,1);
 47a:	84 e4       	ldi	r24, 0x44	; 68
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
		DIO_write('D',1,1);
 484:	84 e4       	ldi	r24, 0x44	; 68
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
		DIO_write('D',2,1);
 48e:	84 e4       	ldi	r24, 0x44	; 68
 490:	62 e0       	ldi	r22, 0x02	; 2
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
		DIO_write('D',3,1);
 498:	84 e4       	ldi	r24, 0x44	; 68
 49a:	63 e0       	ldi	r22, 0x03	; 3
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
		DIO_write('D',row,0);
 4a2:	84 e4       	ldi	r24, 0x44	; 68
 4a4:	60 2f       	mov	r22, r16
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
 4ac:	10 e0       	ldi	r17, 0x00	; 0
	 DIO_vconnectpullup('D',5,1);
	 DIO_vconnectpullup('D',6,1);
	 DIO_vconnectpullup('D',7,1);
	  
 }
 char keypad_u8check_press()
 4ae:	61 2f       	mov	r22, r17
 4b0:	6c 5f       	subi	r22, 0xFC	; 252
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
		{
			x=DIO_u8read('D',(coloumn+4));
 4b2:	84 e4       	ldi	r24, 0x44	; 68
 4b4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <DIO_u8read>
			if(x==0)
 4b8:	88 23       	and	r24, r24
 4ba:	61 f4       	brne	.+24     	; 0x4d4 <keypad_u8check_press+0x86>
			 {
				 returnval=arr[row][coloumn];
 4bc:	e0 2f       	mov	r30, r16
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e1 0f       	add	r30, r17
 4ca:	f1 1d       	adc	r31, r1
 4cc:	ec 0f       	add	r30, r28
 4ce:	fd 1f       	adc	r31, r29
 4d0:	81 81       	ldd	r24, Z+1	; 0x01
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <keypad_u8check_press+0x8e>
		DIO_write('D',1,1);
		DIO_write('D',2,1);
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
 4d4:	1f 5f       	subi	r17, 0xFF	; 255
 4d6:	14 30       	cpi	r17, 0x04	; 4
 4d8:	51 f7       	brne	.-44     	; 0x4ae <keypad_u8check_press+0x60>
 4da:	0b c0       	rjmp	.+22     	; 0x4f2 <keypad_u8check_press+0xa4>
		{
			break;
		}
	}	 
	 return returnval ;	 
 4dc:	60 96       	adiw	r28, 0x10	; 16
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
 4f2:	0f 5f       	subi	r16, 0xFF	; 255
 4f4:	04 30       	cpi	r16, 0x04	; 4
 4f6:	09 f6       	brne	.-126    	; 0x47a <keypad_u8check_press+0x2c>
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	f0 cf       	rjmp	.-32     	; 0x4dc <keypad_u8check_press+0x8e>

000004fc <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
 4fc:	82 e4       	ldi	r24, 0x42	; 66
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <send_falling_edge+0xe>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <send_falling_edge+0x14>
 510:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
 512:	82 e4       	ldi	r24, 0x42	; 66
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	40 e0       	ldi	r20, 0x00	; 0
 518:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
 51c:	8f e9       	ldi	r24, 0x9F	; 159
 51e:	9f e0       	ldi	r25, 0x0F	; 15
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <send_falling_edge+0x24>
 524:	00 c0       	rjmp	.+0      	; 0x526 <send_falling_edge+0x2a>
 526:	00 00       	nop
	_delay_ms(2);
}
 528:	08 95       	ret

0000052a <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
 52a:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
 52c:	81 e4       	ldi	r24, 0x41	; 65
 52e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_write_port>
	DIO_write('B',RS,0);
 532:	82 e4       	ldi	r24, 0x42	; 66
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
	send_falling_edge();
 53c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <send_falling_edge>
 540:	8f ec       	ldi	r24, 0xCF	; 207
 542:	97 e0       	ldi	r25, 0x07	; 7
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_vSend_cmd+0x1a>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_vSend_cmd+0x20>
 54a:	00 00       	nop
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 54c:	08 95       	ret

0000054e <LCD_vInit>:
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	91 ee       	ldi	r25, 0xE1	; 225
 552:	a4 e0       	ldi	r26, 0x04	; 4
 554:	81 50       	subi	r24, 0x01	; 1
 556:	90 40       	sbci	r25, 0x00	; 0
 558:	a0 40       	sbci	r26, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <LCD_vInit+0x6>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_vInit+0x10>
 55e:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
 560:	81 e4       	ldi	r24, 0x41	; 65
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
 56a:	81 e4       	ldi	r24, 0x41	; 65
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
 574:	81 e4       	ldi	r24, 0x41	; 65
 576:	62 e0       	ldi	r22, 0x02	; 2
 578:	41 e0       	ldi	r20, 0x01	; 1
 57a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
 57e:	81 e4       	ldi	r24, 0x41	; 65
 580:	63 e0       	ldi	r22, 0x03	; 3
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
 588:	81 e4       	ldi	r24, 0x41	; 65
 58a:	64 e0       	ldi	r22, 0x04	; 4
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
 592:	81 e4       	ldi	r24, 0x41	; 65
 594:	65 e0       	ldi	r22, 0x05	; 5
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
 59c:	81 e4       	ldi	r24, 0x41	; 65
 59e:	66 e0       	ldi	r22, 0x06	; 6
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
 5a6:	81 e4       	ldi	r24, 0x41	; 65
 5a8:	67 e0       	ldi	r22, 0x07	; 7
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
 5b0:	82 e4       	ldi	r24, 0x42	; 66
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
 5ba:	82 e4       	ldi	r24, 0x42	; 66
 5bc:	62 e0       	ldi	r22, 0x02	; 2
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
 5c4:	82 e4       	ldi	r24, 0x42	; 66
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	41 e0       	ldi	r20, 0x01	; 1
 5ca:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_vsetPINDir>
	DIO_write('B',RW,0);
 5ce:	82 e4       	ldi	r24, 0x42	; 66
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
 5d8:	88 e3       	ldi	r24, 0x38	; 56
 5da:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 5de:	af ec       	ldi	r26, 0xCF	; 207
 5e0:	b7 e0       	ldi	r27, 0x07	; 7
 5e2:	11 97       	sbiw	r26, 0x01	; 1
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCD_vInit+0x94>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <LCD_vInit+0x9a>
 5e8:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 5ea:	8e e0       	ldi	r24, 0x0E	; 14
 5ec:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 5f0:	8f ec       	ldi	r24, 0xCF	; 207
 5f2:	97 e0       	ldi	r25, 0x07	; 7
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCD_vInit+0xa6>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <LCD_vInit+0xac>
 5fa:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 602:	af e1       	ldi	r26, 0x1F	; 31
 604:	be e4       	ldi	r27, 0x4E	; 78
 606:	11 97       	sbiw	r26, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <LCD_vInit+0xb8>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <LCD_vInit+0xbe>
 60c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 614:	8f ec       	ldi	r24, 0xCF	; 207
 616:	97 e0       	ldi	r25, 0x07	; 7
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <LCD_vInit+0xca>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <LCD_vInit+0xd0>
 61e:	00 00       	nop
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
 620:	08 95       	ret

00000622 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
 622:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',data);
 624:	81 e4       	ldi	r24, 0x41	; 65
 626:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_write_port>
	DIO_write('B',RS,1);
 62a:	82 e4       	ldi	r24, 0x42	; 66
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <DIO_write>
	send_falling_edge();
 634:	0e 94 7e 02 	call	0x4fc	; 0x4fc <send_falling_edge>
 638:	8f ec       	ldi	r24, 0xCF	; 207
 63a:	97 e0       	ldi	r25, 0x07	; 7
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_vSend_char+0x1a>
 640:	00 c0       	rjmp	.+0      	; 0x642 <LCD_vSend_char+0x20>
 642:	00 00       	nop
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
 644:	08 95       	ret

00000646 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 64c:	88 81       	ld	r24, Y
 64e:	88 23       	and	r24, r24
 650:	31 f0       	breq	.+12     	; 0x65e <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
 652:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
 654:	0e 94 11 03 	call	0x622	; 0x622 <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 658:	89 91       	ld	r24, Y+
 65a:	88 23       	and	r24, r24
 65c:	d9 f7       	brne	.-10     	; 0x654 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 66a:	8f e1       	ldi	r24, 0x1F	; 31
 66c:	9e e4       	ldi	r25, 0x4E	; 78
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <LCD_clearscreen+0xa>
 672:	00 c0       	rjmp	.+0      	; 0x674 <LCD_clearscreen+0x10>
 674:	00 00       	nop
	_delay_ms(10);
}
 676:	08 95       	ret

00000678 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 678:	28 2f       	mov	r18, r24
 67a:	21 50       	subi	r18, 0x01	; 1
 67c:	22 30       	cpi	r18, 0x02	; 2
 67e:	70 f4       	brcc	.+28     	; 0x69c <LCD_movecursor+0x24>
 680:	61 31       	cpi	r22, 0x11	; 17
 682:	70 f4       	brcc	.+28     	; 0x6a0 <LCD_movecursor+0x28>
 684:	66 23       	and	r22, r22
 686:	71 f0       	breq	.+28     	; 0x6a4 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	19 f4       	brne	.+6      	; 0x692 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 68c:	96 2f       	mov	r25, r22
 68e:	91 58       	subi	r25, 0x81	; 129
 690:	0a c0       	rjmp	.+20     	; 0x6a6 <LCD_movecursor+0x2e>
	}
	else if (row==2)
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	41 f4       	brne	.+16     	; 0x6a6 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
 696:	96 2f       	mov	r25, r22
 698:	91 54       	subi	r25, 0x41	; 65
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 69c:	90 e8       	ldi	r25, 0x80	; 128
 69e:	03 c0       	rjmp	.+6      	; 0x6a6 <LCD_movecursor+0x2e>
 6a0:	90 e8       	ldi	r25, 0x80	; 128
 6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <LCD_movecursor+0x2e>
 6a4:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
 6a6:	89 2f       	mov	r24, r25
 6a8:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_vSend_cmd>
 6ac:	8f ec       	ldi	r24, 0xCF	; 207
 6ae:	97 e0       	ldi	r25, 0x07	; 7
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_movecursor+0x38>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_movecursor+0x3e>
 6b6:	00 00       	nop
	_delay_ms(1);
}
 6b8:	08 95       	ret

000006ba <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
 6ba:	82 34       	cpi	r24, 0x42	; 66
 6bc:	51 f1       	breq	.+84     	; 0x712 <DIO_vsetPINDir+0x58>
 6be:	83 34       	cpi	r24, 0x43	; 67
 6c0:	20 f4       	brcc	.+8      	; 0x6ca <DIO_vsetPINDir+0x10>
 6c2:	81 34       	cpi	r24, 0x41	; 65
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <DIO_vsetPINDir+0xe>
 6c6:	7b c0       	rjmp	.+246    	; 0x7be <DIO_vsetPINDir+0x104>
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <DIO_vsetPINDir+0x1e>
 6ca:	83 34       	cpi	r24, 0x43	; 67
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <DIO_vsetPINDir+0x16>
 6ce:	3e c0       	rjmp	.+124    	; 0x74c <DIO_vsetPINDir+0x92>
 6d0:	84 34       	cpi	r24, 0x44	; 68
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <DIO_vsetPINDir+0x1c>
 6d4:	74 c0       	rjmp	.+232    	; 0x7be <DIO_vsetPINDir+0x104>
 6d6:	57 c0       	rjmp	.+174    	; 0x786 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
 6d8:	41 30       	cpi	r20, 0x01	; 1
 6da:	69 f4       	brne	.+26     	; 0x6f6 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
 6dc:	2a b3       	in	r18, 0x1a	; 26
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	ac 01       	movw	r20, r24
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_vsetPINDir+0x30>
 6e6:	44 0f       	add	r20, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	6a 95       	dec	r22
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_vsetPINDir+0x2c>
 6ee:	ba 01       	movw	r22, r20
 6f0:	62 2b       	or	r22, r18
 6f2:	6a bb       	out	0x1a, r22	; 26
 6f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 6f6:	2a b3       	in	r18, 0x1a	; 26
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	ac 01       	movw	r20, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_vsetPINDir+0x4a>
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_vsetPINDir+0x46>
 708:	ba 01       	movw	r22, r20
 70a:	60 95       	com	r22
 70c:	62 23       	and	r22, r18
 70e:	6a bb       	out	0x1a, r22	; 26
 710:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
 712:	41 30       	cpi	r20, 0x01	; 1
 714:	69 f4       	brne	.+26     	; 0x730 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 716:	27 b3       	in	r18, 0x17	; 23
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	ac 01       	movw	r20, r24
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_vsetPINDir+0x6a>
 720:	44 0f       	add	r20, r20
 722:	55 1f       	adc	r21, r21
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_vsetPINDir+0x66>
 728:	ba 01       	movw	r22, r20
 72a:	62 2b       	or	r22, r18
 72c:	67 bb       	out	0x17, r22	; 23
 72e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 730:	27 b3       	in	r18, 0x17	; 23
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	ac 01       	movw	r20, r24
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_vsetPINDir+0x84>
 73a:	44 0f       	add	r20, r20
 73c:	55 1f       	adc	r21, r21
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_vsetPINDir+0x80>
 742:	ba 01       	movw	r22, r20
 744:	60 95       	com	r22
 746:	62 23       	and	r22, r18
 748:	67 bb       	out	0x17, r22	; 23
 74a:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
 74c:	41 30       	cpi	r20, 0x01	; 1
 74e:	69 f4       	brne	.+26     	; 0x76a <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 750:	24 b3       	in	r18, 0x14	; 20
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	ac 01       	movw	r20, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_vsetPINDir+0xa4>
 75a:	44 0f       	add	r20, r20
 75c:	55 1f       	adc	r21, r21
 75e:	6a 95       	dec	r22
 760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_vsetPINDir+0xa0>
 762:	ba 01       	movw	r22, r20
 764:	62 2b       	or	r22, r18
 766:	64 bb       	out	0x14, r22	; 20
 768:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 76a:	24 b3       	in	r18, 0x14	; 20
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	ac 01       	movw	r20, r24
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_vsetPINDir+0xbe>
 774:	44 0f       	add	r20, r20
 776:	55 1f       	adc	r21, r21
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_vsetPINDir+0xba>
 77c:	ba 01       	movw	r22, r20
 77e:	60 95       	com	r22
 780:	62 23       	and	r22, r18
 782:	64 bb       	out	0x14, r22	; 20
 784:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
 786:	41 30       	cpi	r20, 0x01	; 1
 788:	69 f4       	brne	.+26     	; 0x7a4 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 78a:	21 b3       	in	r18, 0x11	; 17
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	ac 01       	movw	r20, r24
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_vsetPINDir+0xde>
 794:	44 0f       	add	r20, r20
 796:	55 1f       	adc	r21, r21
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_vsetPINDir+0xda>
 79c:	ba 01       	movw	r22, r20
 79e:	62 2b       	or	r22, r18
 7a0:	61 bb       	out	0x11, r22	; 17
 7a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 7a4:	21 b3       	in	r18, 0x11	; 17
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	ac 01       	movw	r20, r24
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_vsetPINDir+0xf8>
 7ae:	44 0f       	add	r20, r20
 7b0:	55 1f       	adc	r21, r21
 7b2:	6a 95       	dec	r22
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_vsetPINDir+0xf4>
 7b6:	ba 01       	movw	r22, r20
 7b8:	60 95       	com	r22
 7ba:	62 23       	and	r22, r18
 7bc:	61 bb       	out	0x11, r22	; 17
 7be:	08 95       	ret

000007c0 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
 7c0:	82 34       	cpi	r24, 0x42	; 66
 7c2:	51 f1       	breq	.+84     	; 0x818 <DIO_write+0x58>
 7c4:	83 34       	cpi	r24, 0x43	; 67
 7c6:	20 f4       	brcc	.+8      	; 0x7d0 <DIO_write+0x10>
 7c8:	81 34       	cpi	r24, 0x41	; 65
 7ca:	09 f0       	breq	.+2      	; 0x7ce <DIO_write+0xe>
 7cc:	7b c0       	rjmp	.+246    	; 0x8c4 <__stack+0x65>
 7ce:	07 c0       	rjmp	.+14     	; 0x7de <DIO_write+0x1e>
 7d0:	83 34       	cpi	r24, 0x43	; 67
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <DIO_write+0x16>
 7d4:	3e c0       	rjmp	.+124    	; 0x852 <DIO_write+0x92>
 7d6:	84 34       	cpi	r24, 0x44	; 68
 7d8:	09 f0       	breq	.+2      	; 0x7dc <DIO_write+0x1c>
 7da:	74 c0       	rjmp	.+232    	; 0x8c4 <__stack+0x65>
 7dc:	57 c0       	rjmp	.+174    	; 0x88c <__stack+0x2d>
	{
		case 'A' :
		
		if(outputvalue==1)
 7de:	41 30       	cpi	r20, 0x01	; 1
 7e0:	69 f4       	brne	.+26     	; 0x7fc <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 7e2:	2b b3       	in	r18, 0x1b	; 27
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	ac 01       	movw	r20, r24
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_write+0x30>
 7ec:	44 0f       	add	r20, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	6a 95       	dec	r22
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_write+0x2c>
 7f4:	ba 01       	movw	r22, r20
 7f6:	62 2b       	or	r22, r18
 7f8:	6b bb       	out	0x1b, r22	; 27
 7fa:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 7fc:	2b b3       	in	r18, 0x1b	; 27
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	ac 01       	movw	r20, r24
 804:	02 c0       	rjmp	.+4      	; 0x80a <DIO_write+0x4a>
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	6a 95       	dec	r22
 80c:	e2 f7       	brpl	.-8      	; 0x806 <DIO_write+0x46>
 80e:	ba 01       	movw	r22, r20
 810:	60 95       	com	r22
 812:	62 23       	and	r22, r18
 814:	6b bb       	out	0x1b, r22	; 27
 816:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
 818:	41 30       	cpi	r20, 0x01	; 1
 81a:	69 f4       	brne	.+26     	; 0x836 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 81c:	28 b3       	in	r18, 0x18	; 24
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	ac 01       	movw	r20, r24
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_write+0x6a>
 826:	44 0f       	add	r20, r20
 828:	55 1f       	adc	r21, r21
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_write+0x66>
 82e:	ba 01       	movw	r22, r20
 830:	62 2b       	or	r22, r18
 832:	68 bb       	out	0x18, r22	; 24
 834:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 836:	28 b3       	in	r18, 0x18	; 24
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	ac 01       	movw	r20, r24
 83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_write+0x84>
 840:	44 0f       	add	r20, r20
 842:	55 1f       	adc	r21, r21
 844:	6a 95       	dec	r22
 846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_write+0x80>
 848:	ba 01       	movw	r22, r20
 84a:	60 95       	com	r22
 84c:	62 23       	and	r22, r18
 84e:	68 bb       	out	0x18, r22	; 24
 850:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
 852:	41 30       	cpi	r20, 0x01	; 1
 854:	69 f4       	brne	.+26     	; 0x870 <__stack+0x11>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 856:	25 b3       	in	r18, 0x15	; 21
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	ac 01       	movw	r20, r24
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	44 0f       	add	r20, r20
 862:	55 1f       	adc	r21, r21
 864:	6a 95       	dec	r22
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	ba 01       	movw	r22, r20
 86a:	62 2b       	or	r22, r18
 86c:	65 bb       	out	0x15, r22	; 21
 86e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 870:	25 b3       	in	r18, 0x15	; 21
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	ac 01       	movw	r20, r24
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	44 0f       	add	r20, r20
 87c:	55 1f       	adc	r21, r21
 87e:	6a 95       	dec	r22
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	ba 01       	movw	r22, r20
 884:	60 95       	com	r22
 886:	62 23       	and	r22, r18
 888:	65 bb       	out	0x15, r22	; 21
 88a:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
 88c:	41 30       	cpi	r20, 0x01	; 1
 88e:	69 f4       	brne	.+26     	; 0x8aa <__stack+0x4b>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 890:	22 b3       	in	r18, 0x12	; 18
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	ac 01       	movw	r20, r24
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	44 0f       	add	r20, r20
 89c:	55 1f       	adc	r21, r21
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	ba 01       	movw	r22, r20
 8a4:	62 2b       	or	r22, r18
 8a6:	62 bb       	out	0x12, r22	; 18
 8a8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 8aa:	22 b3       	in	r18, 0x12	; 18
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	ac 01       	movw	r20, r24
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	44 0f       	add	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	6a 95       	dec	r22
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	ba 01       	movw	r22, r20
 8be:	60 95       	com	r22
 8c0:	62 23       	and	r22, r18
 8c2:	62 bb       	out	0x12, r22	; 18
 8c4:	08 95       	ret

000008c6 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
 8c6:	82 34       	cpi	r24, 0x42	; 66
 8c8:	f1 f0       	breq	.+60     	; 0x906 <DIO_u8read+0x40>
 8ca:	83 34       	cpi	r24, 0x43	; 67
 8cc:	20 f4       	brcc	.+8      	; 0x8d6 <DIO_u8read+0x10>
 8ce:	81 34       	cpi	r24, 0x41	; 65
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <DIO_u8read+0xe>
 8d2:	4f c0       	rjmp	.+158    	; 0x972 <DIO_u8read+0xac>
 8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <DIO_u8read+0x1c>
 8d6:	83 34       	cpi	r24, 0x43	; 67
 8d8:	41 f1       	breq	.+80     	; 0x92a <DIO_u8read+0x64>
 8da:	84 34       	cpi	r24, 0x44	; 68
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <DIO_u8read+0x1a>
 8de:	49 c0       	rjmp	.+146    	; 0x972 <DIO_u8read+0xac>
 8e0:	36 c0       	rjmp	.+108    	; 0x94e <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 8e2:	29 b3       	in	r18, 0x19	; 25
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	06 2e       	mov	r0, r22
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <DIO_u8read+0x2a>
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	0a 94       	dec	r0
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <DIO_u8read+0x26>
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	82 23       	and	r24, r18
 8f8:	93 23       	and	r25, r19
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_u8read+0x3a>
 8fc:	95 95       	asr	r25
 8fe:	87 95       	ror	r24
 900:	6a 95       	dec	r22
 902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_u8read+0x36>
		break;
 904:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 906:	26 b3       	in	r18, 0x16	; 22
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	06 2e       	mov	r0, r22
 90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_u8read+0x4e>
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	0a 94       	dec	r0
 916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_u8read+0x4a>
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	82 23       	and	r24, r18
 91c:	93 23       	and	r25, r19
 91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_u8read+0x5e>
 920:	95 95       	asr	r25
 922:	87 95       	ror	r24
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_u8read+0x5a>
		break;
 928:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 92a:	23 b3       	in	r18, 0x13	; 19
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	06 2e       	mov	r0, r22
 932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_u8read+0x72>
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	0a 94       	dec	r0
 93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_u8read+0x6e>
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	82 23       	and	r24, r18
 940:	93 23       	and	r25, r19
 942:	02 c0       	rjmp	.+4      	; 0x948 <DIO_u8read+0x82>
 944:	95 95       	asr	r25
 946:	87 95       	ror	r24
 948:	6a 95       	dec	r22
 94a:	e2 f7       	brpl	.-8      	; 0x944 <DIO_u8read+0x7e>
		break;
 94c:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 94e:	20 b3       	in	r18, 0x10	; 16
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	06 2e       	mov	r0, r22
 956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_u8read+0x96>
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	0a 94       	dec	r0
 95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_u8read+0x92>
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	82 23       	and	r24, r18
 964:	93 23       	and	r25, r19
 966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_u8read+0xa6>
 968:	95 95       	asr	r25
 96a:	87 95       	ror	r24
 96c:	6a 95       	dec	r22
 96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_u8read+0xa2>
		break;
 970:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
 972:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
 974:	08 95       	ret

00000976 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
 976:	82 34       	cpi	r24, 0x42	; 66
 978:	b9 f0       	breq	.+46     	; 0x9a8 <DIO_toggle+0x32>
 97a:	83 34       	cpi	r24, 0x43	; 67
 97c:	18 f4       	brcc	.+6      	; 0x984 <DIO_toggle+0xe>
 97e:	81 34       	cpi	r24, 0x41	; 65
 980:	c9 f5       	brne	.+114    	; 0x9f4 <DIO_toggle+0x7e>
 982:	05 c0       	rjmp	.+10     	; 0x98e <DIO_toggle+0x18>
 984:	83 34       	cpi	r24, 0x43	; 67
 986:	e9 f0       	breq	.+58     	; 0x9c2 <DIO_toggle+0x4c>
 988:	84 34       	cpi	r24, 0x44	; 68
 98a:	a1 f5       	brne	.+104    	; 0x9f4 <DIO_toggle+0x7e>
 98c:	27 c0       	rjmp	.+78     	; 0x9dc <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 98e:	2b b3       	in	r18, 0x1b	; 27
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	ac 01       	movw	r20, r24
 996:	02 c0       	rjmp	.+4      	; 0x99c <DIO_toggle+0x26>
 998:	44 0f       	add	r20, r20
 99a:	55 1f       	adc	r21, r21
 99c:	6a 95       	dec	r22
 99e:	e2 f7       	brpl	.-8      	; 0x998 <DIO_toggle+0x22>
 9a0:	ba 01       	movw	r22, r20
 9a2:	62 27       	eor	r22, r18
 9a4:	6b bb       	out	0x1b, r22	; 27
		break;
 9a6:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 9a8:	28 b3       	in	r18, 0x18	; 24
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	ac 01       	movw	r20, r24
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <DIO_toggle+0x40>
 9b2:	44 0f       	add	r20, r20
 9b4:	55 1f       	adc	r21, r21
 9b6:	6a 95       	dec	r22
 9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <DIO_toggle+0x3c>
 9ba:	ba 01       	movw	r22, r20
 9bc:	62 27       	eor	r22, r18
 9be:	68 bb       	out	0x18, r22	; 24
		break;
 9c0:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 9c2:	25 b3       	in	r18, 0x15	; 21
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	ac 01       	movw	r20, r24
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <DIO_toggle+0x5a>
 9cc:	44 0f       	add	r20, r20
 9ce:	55 1f       	adc	r21, r21
 9d0:	6a 95       	dec	r22
 9d2:	e2 f7       	brpl	.-8      	; 0x9cc <DIO_toggle+0x56>
 9d4:	ba 01       	movw	r22, r20
 9d6:	62 27       	eor	r22, r18
 9d8:	65 bb       	out	0x15, r22	; 21
		break;
 9da:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 9dc:	22 b3       	in	r18, 0x12	; 18
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	ac 01       	movw	r20, r24
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_toggle+0x74>
 9e6:	44 0f       	add	r20, r20
 9e8:	55 1f       	adc	r21, r21
 9ea:	6a 95       	dec	r22
 9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_toggle+0x70>
 9ee:	ba 01       	movw	r22, r20
 9f0:	62 27       	eor	r22, r18
 9f2:	62 bb       	out	0x12, r22	; 18
 9f4:	08 95       	ret

000009f6 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
 9f6:	82 34       	cpi	r24, 0x42	; 66
 9f8:	61 f0       	breq	.+24     	; 0xa12 <DIO_set_port_direction+0x1c>
 9fa:	83 34       	cpi	r24, 0x43	; 67
 9fc:	18 f4       	brcc	.+6      	; 0xa04 <DIO_set_port_direction+0xe>
 9fe:	81 34       	cpi	r24, 0x41	; 65
 a00:	69 f4       	brne	.+26     	; 0xa1c <DIO_set_port_direction+0x26>
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <DIO_set_port_direction+0x18>
 a04:	83 34       	cpi	r24, 0x43	; 67
 a06:	39 f0       	breq	.+14     	; 0xa16 <DIO_set_port_direction+0x20>
 a08:	84 34       	cpi	r24, 0x44	; 68
 a0a:	41 f4       	brne	.+16     	; 0xa1c <DIO_set_port_direction+0x26>
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 a0e:	6a bb       	out	0x1a, r22	; 26
		break ;
 a10:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
 a12:	67 bb       	out	0x17, r22	; 23
		break ;
 a14:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
 a16:	64 bb       	out	0x14, r22	; 20
		break ;
 a18:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
 a1a:	61 bb       	out	0x11, r22	; 17
 a1c:	08 95       	ret

00000a1e <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
 a1e:	82 34       	cpi	r24, 0x42	; 66
 a20:	61 f0       	breq	.+24     	; 0xa3a <DIO_write_port+0x1c>
 a22:	83 34       	cpi	r24, 0x43	; 67
 a24:	18 f4       	brcc	.+6      	; 0xa2c <DIO_write_port+0xe>
 a26:	81 34       	cpi	r24, 0x41	; 65
 a28:	69 f4       	brne	.+26     	; 0xa44 <DIO_write_port+0x26>
 a2a:	05 c0       	rjmp	.+10     	; 0xa36 <DIO_write_port+0x18>
 a2c:	83 34       	cpi	r24, 0x43	; 67
 a2e:	39 f0       	breq	.+14     	; 0xa3e <DIO_write_port+0x20>
 a30:	84 34       	cpi	r24, 0x44	; 68
 a32:	41 f4       	brne	.+16     	; 0xa44 <DIO_write_port+0x26>
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 a36:	6b bb       	out	0x1b, r22	; 27
		break ;
 a38:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 a3a:	68 bb       	out	0x18, r22	; 24
		break ;
 a3c:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 a3e:	65 bb       	out	0x15, r22	; 21
		break ;
 a40:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 a42:	62 bb       	out	0x12, r22	; 18
 a44:	08 95       	ret

00000a46 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
 a46:	82 34       	cpi	r24, 0x42	; 66
 a48:	61 f0       	breq	.+24     	; 0xa62 <DIO_read_port+0x1c>
 a4a:	83 34       	cpi	r24, 0x43	; 67
 a4c:	18 f4       	brcc	.+6      	; 0xa54 <DIO_read_port+0xe>
 a4e:	81 34       	cpi	r24, 0x41	; 65
 a50:	71 f4       	brne	.+28     	; 0xa6e <DIO_read_port+0x28>
 a52:	05 c0       	rjmp	.+10     	; 0xa5e <DIO_read_port+0x18>
 a54:	83 34       	cpi	r24, 0x43	; 67
 a56:	39 f0       	breq	.+14     	; 0xa66 <DIO_read_port+0x20>
 a58:	84 34       	cpi	r24, 0x44	; 68
 a5a:	49 f4       	brne	.+18     	; 0xa6e <DIO_read_port+0x28>
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
 a5e:	89 b3       	in	r24, 0x19	; 25
		break ;
 a60:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
 a62:	86 b3       	in	r24, 0x16	; 22
		break ;
 a64:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
 a66:	83 b3       	in	r24, 0x13	; 19
		break ;
 a68:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
 a6a:	80 b3       	in	r24, 0x10	; 16
		break ;
 a6c:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
 a6e:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
 a70:	08 95       	ret

00000a72 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
 a72:	82 34       	cpi	r24, 0x42	; 66
 a74:	51 f1       	breq	.+84     	; 0xaca <DIO_vconnectpullup+0x58>
 a76:	83 34       	cpi	r24, 0x43	; 67
 a78:	20 f4       	brcc	.+8      	; 0xa82 <DIO_vconnectpullup+0x10>
 a7a:	81 34       	cpi	r24, 0x41	; 65
 a7c:	09 f0       	breq	.+2      	; 0xa80 <DIO_vconnectpullup+0xe>
 a7e:	7b c0       	rjmp	.+246    	; 0xb76 <DIO_vconnectpullup+0x104>
 a80:	07 c0       	rjmp	.+14     	; 0xa90 <DIO_vconnectpullup+0x1e>
 a82:	83 34       	cpi	r24, 0x43	; 67
 a84:	09 f4       	brne	.+2      	; 0xa88 <DIO_vconnectpullup+0x16>
 a86:	3e c0       	rjmp	.+124    	; 0xb04 <DIO_vconnectpullup+0x92>
 a88:	84 34       	cpi	r24, 0x44	; 68
 a8a:	09 f0       	breq	.+2      	; 0xa8e <DIO_vconnectpullup+0x1c>
 a8c:	74 c0       	rjmp	.+232    	; 0xb76 <DIO_vconnectpullup+0x104>
 a8e:	57 c0       	rjmp	.+174    	; 0xb3e <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
 a90:	41 30       	cpi	r20, 0x01	; 1
 a92:	69 f4       	brne	.+26     	; 0xaae <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
 a94:	2b b3       	in	r18, 0x1b	; 27
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	ac 01       	movw	r20, r24
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <DIO_vconnectpullup+0x30>
 a9e:	44 0f       	add	r20, r20
 aa0:	55 1f       	adc	r21, r21
 aa2:	6a 95       	dec	r22
 aa4:	e2 f7       	brpl	.-8      	; 0xa9e <DIO_vconnectpullup+0x2c>
 aa6:	ba 01       	movw	r22, r20
 aa8:	62 2b       	or	r22, r18
 aaa:	6b bb       	out	0x1b, r22	; 27
 aac:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 aae:	2b b3       	in	r18, 0x1b	; 27
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	ac 01       	movw	r20, r24
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_vconnectpullup+0x4a>
 ab8:	44 0f       	add	r20, r20
 aba:	55 1f       	adc	r21, r21
 abc:	6a 95       	dec	r22
 abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_vconnectpullup+0x46>
 ac0:	ba 01       	movw	r22, r20
 ac2:	60 95       	com	r22
 ac4:	62 23       	and	r22, r18
 ac6:	6b bb       	out	0x1b, r22	; 27
 ac8:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
 aca:	41 30       	cpi	r20, 0x01	; 1
 acc:	69 f4       	brne	.+26     	; 0xae8 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
 ace:	28 b3       	in	r18, 0x18	; 24
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	ac 01       	movw	r20, r24
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_vconnectpullup+0x6a>
 ad8:	44 0f       	add	r20, r20
 ada:	55 1f       	adc	r21, r21
 adc:	6a 95       	dec	r22
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_vconnectpullup+0x66>
 ae0:	ba 01       	movw	r22, r20
 ae2:	62 2b       	or	r22, r18
 ae4:	68 bb       	out	0x18, r22	; 24
 ae6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 ae8:	28 b3       	in	r18, 0x18	; 24
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	ac 01       	movw	r20, r24
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <DIO_vconnectpullup+0x84>
 af2:	44 0f       	add	r20, r20
 af4:	55 1f       	adc	r21, r21
 af6:	6a 95       	dec	r22
 af8:	e2 f7       	brpl	.-8      	; 0xaf2 <DIO_vconnectpullup+0x80>
 afa:	ba 01       	movw	r22, r20
 afc:	60 95       	com	r22
 afe:	62 23       	and	r22, r18
 b00:	68 bb       	out	0x18, r22	; 24
 b02:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
 b04:	41 30       	cpi	r20, 0x01	; 1
 b06:	69 f4       	brne	.+26     	; 0xb22 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
 b08:	25 b3       	in	r18, 0x15	; 21
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	ac 01       	movw	r20, r24
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_vconnectpullup+0xa4>
 b12:	44 0f       	add	r20, r20
 b14:	55 1f       	adc	r21, r21
 b16:	6a 95       	dec	r22
 b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_vconnectpullup+0xa0>
 b1a:	ba 01       	movw	r22, r20
 b1c:	62 2b       	or	r22, r18
 b1e:	65 bb       	out	0x15, r22	; 21
 b20:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 b22:	25 b3       	in	r18, 0x15	; 21
 b24:	81 e0       	ldi	r24, 0x01	; 1
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	ac 01       	movw	r20, r24
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_vconnectpullup+0xbe>
 b2c:	44 0f       	add	r20, r20
 b2e:	55 1f       	adc	r21, r21
 b30:	6a 95       	dec	r22
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_vconnectpullup+0xba>
 b34:	ba 01       	movw	r22, r20
 b36:	60 95       	com	r22
 b38:	62 23       	and	r22, r18
 b3a:	65 bb       	out	0x15, r22	; 21
 b3c:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
 b3e:	41 30       	cpi	r20, 0x01	; 1
 b40:	69 f4       	brne	.+26     	; 0xb5c <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
 b42:	22 b3       	in	r18, 0x12	; 18
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	ac 01       	movw	r20, r24
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_vconnectpullup+0xde>
 b4c:	44 0f       	add	r20, r20
 b4e:	55 1f       	adc	r21, r21
 b50:	6a 95       	dec	r22
 b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_vconnectpullup+0xda>
 b54:	ba 01       	movw	r22, r20
 b56:	62 2b       	or	r22, r18
 b58:	62 bb       	out	0x12, r22	; 18
 b5a:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 b5c:	22 b3       	in	r18, 0x12	; 18
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	ac 01       	movw	r20, r24
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <DIO_vconnectpullup+0xf8>
 b66:	44 0f       	add	r20, r20
 b68:	55 1f       	adc	r21, r21
 b6a:	6a 95       	dec	r22
 b6c:	e2 f7       	brpl	.-8      	; 0xb66 <DIO_vconnectpullup+0xf4>
 b6e:	ba 01       	movw	r22, r20
 b70:	60 95       	com	r22
 b72:	62 23       	and	r22, r18
 b74:	62 bb       	out	0x12, r22	; 18
 b76:	08 95       	ret

00000b78 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
 b78:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 b7a:	82 34       	cpi	r24, 0x42	; 66
 b7c:	81 f0       	breq	.+32     	; 0xb9e <write_low_nibble+0x26>
 b7e:	83 34       	cpi	r24, 0x43	; 67
 b80:	18 f4       	brcc	.+6      	; 0xb88 <write_low_nibble+0x10>
 b82:	81 34       	cpi	r24, 0x41	; 65
 b84:	f1 f4       	brne	.+60     	; 0xbc2 <write_low_nibble+0x4a>
 b86:	05 c0       	rjmp	.+10     	; 0xb92 <write_low_nibble+0x1a>
 b88:	83 34       	cpi	r24, 0x43	; 67
 b8a:	79 f0       	breq	.+30     	; 0xbaa <write_low_nibble+0x32>
 b8c:	84 34       	cpi	r24, 0x44	; 68
 b8e:	c9 f4       	brne	.+50     	; 0xbc2 <write_low_nibble+0x4a>
 b90:	12 c0       	rjmp	.+36     	; 0xbb6 <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
 b92:	8b b3       	in	r24, 0x1b	; 27
 b94:	80 7f       	andi	r24, 0xF0	; 240
 b96:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 b98:	8b b3       	in	r24, 0x1b	; 27
 b9a:	86 2b       	or	r24, r22
 b9c:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
 b9e:	88 b3       	in	r24, 0x18	; 24
 ba0:	80 7f       	andi	r24, 0xF0	; 240
 ba2:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 ba4:	88 b3       	in	r24, 0x18	; 24
 ba6:	86 2b       	or	r24, r22
 ba8:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
 baa:	85 b3       	in	r24, 0x15	; 21
 bac:	80 7f       	andi	r24, 0xF0	; 240
 bae:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 bb0:	85 b3       	in	r24, 0x15	; 21
 bb2:	86 2b       	or	r24, r22
 bb4:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
 bb6:	82 b3       	in	r24, 0x12	; 18
 bb8:	80 7f       	andi	r24, 0xF0	; 240
 bba:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 bbc:	82 b3       	in	r24, 0x12	; 18
 bbe:	68 2b       	or	r22, r24
 bc0:	62 bb       	out	0x12, r22	; 18
 bc2:	08 95       	ret

00000bc4 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
 bc4:	62 95       	swap	r22
 bc6:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 bc8:	82 34       	cpi	r24, 0x42	; 66
 bca:	81 f0       	breq	.+32     	; 0xbec <write_high_nibble+0x28>
 bcc:	83 34       	cpi	r24, 0x43	; 67
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <write_high_nibble+0x12>
 bd0:	81 34       	cpi	r24, 0x41	; 65
 bd2:	f1 f4       	brne	.+60     	; 0xc10 <write_high_nibble+0x4c>
 bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <write_high_nibble+0x1c>
 bd6:	83 34       	cpi	r24, 0x43	; 67
 bd8:	79 f0       	breq	.+30     	; 0xbf8 <write_high_nibble+0x34>
 bda:	84 34       	cpi	r24, 0x44	; 68
 bdc:	c9 f4       	brne	.+50     	; 0xc10 <write_high_nibble+0x4c>
 bde:	12 c0       	rjmp	.+36     	; 0xc04 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
 be0:	8b b3       	in	r24, 0x1b	; 27
 be2:	8f 70       	andi	r24, 0x0F	; 15
 be4:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
 be6:	8b b3       	in	r24, 0x1b	; 27
 be8:	86 2b       	or	r24, r22
 bea:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
 bec:	88 b3       	in	r24, 0x18	; 24
 bee:	8f 70       	andi	r24, 0x0F	; 15
 bf0:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
 bf2:	88 b3       	in	r24, 0x18	; 24
 bf4:	86 2b       	or	r24, r22
 bf6:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
 bf8:	85 b3       	in	r24, 0x15	; 21
 bfa:	8f 70       	andi	r24, 0x0F	; 15
 bfc:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
 bfe:	85 b3       	in	r24, 0x15	; 21
 c00:	86 2b       	or	r24, r22
 c02:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
 c04:	82 b3       	in	r24, 0x12	; 18
 c06:	8f 70       	andi	r24, 0x0F	; 15
 c08:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
 c0a:	82 b3       	in	r24, 0x12	; 18
 c0c:	68 2b       	or	r22, r24
 c0e:	62 bb       	out	0x12, r22	; 18
 c10:	08 95       	ret

00000c12 <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
 c12:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 c14:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
 c16:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
 c18:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
 c1a:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
 c1c:	e1 99       	sbic	0x1c, 1	; 28
 c1e:	fe cf       	rjmp	.-4      	; 0xc1c <EEPROM_write+0xa>
	
}
 c20:	08 95       	ret

00000c22 <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
 c22:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
 c24:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
 c26:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
 c28:	8d b3       	in	r24, 0x1d	; 29
}
 c2a:	08 95       	ret

00000c2c <main>:
#include <avr/io.h>
#include "APPLICATION/APP.h"

int main(void)
{
	APP_Init();
 c2c:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while(1)
    {
        APP_Main();
 c30:	0e 94 e5 01 	call	0x3ca	; 0x3ca <APP_Main>
 c34:	fd cf       	rjmp	.-6      	; 0xc30 <main+0x4>

00000c36 <_exit>:
 c36:	f8 94       	cli

00000c38 <__stop_program>:
 c38:	ff cf       	rjmp	.-2      	; 0xc38 <__stop_program>
